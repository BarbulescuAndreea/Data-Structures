Implemented Game: War with playcards


beginning: I created the structure to contain the color, number and next fields.
I initialized the list, to be able to create the required package,
starting from A to 2, with all the characteristics of each.
I used the insert function in a simple chain list for a
performs the initialization function.
I also created a memory release function.
for mixing the cards, when I had to reverse them,
I used the insert function at the beginning to change
the order of the first book with the last.

at nPiles, I calculated the size of the subpackage, and put in each subpackage
using a vector of lists (vlist), then I put in a vector of lists
again, the elements in the order in which they are received at the entrance. in the end, i have
put everything in a new list using insert ma.
I made the write list function to be able to write the package at the output
in the required form, that is, each number should be associated with a letter
corresponding to.

to split: I split the package into two equal packages, using ma de
length function, then I used a sentinel cell, I checked
the cases in which one of the lists would have been null, and at the end I have
put everything according to the aux that I made to point to the cell
sentinel.

to Mongean: I took the first element from the list, then depending on
the even or odd index of the element in the package remains, I inserted
at the end of the new list or at the beginning.
in the War card game, I took each step in turn.
I gave each player half a pack, I checked the case
in which the winner is determined after 100 tomorrows and I used
a frequency vector. I started the game: I checked the 3 cases:
if the first player's card is higher, then I added to
the end of his books, the last two books given down: one of his and
the other of the opponent. I checked in case he doesn't have any more books,
and that means one of them won. then on the case where
the second has a bigger book than the first, I did the same things.
in case of a tie (War) I calculated the number of cards turned using ma
of a minimum function. I used 2 auxiliary lists (copy 1 and
copy 2) to hold the last item that was removed from the package
by each player. then depending on the one who gave the most card
great, the insertion has begun (the hardest part :)) ). I used o
the new list (temp) that will always hold the next value from the player's list
(two -> next or one -> next); ex: I first put the book with which
s won, then after her I put the first card from the bottom, then in front of her I have
put the remaining cards in his hand between the card with which he won
and the first book, I put the ones that were taken down, from the end
towards the beginning. after doing this, I also put the other player's cards
according to the same idea: the card with which he won, the first down card,
then between the two, I put the ones he gave down in reverse order.
I put everything in a while cycle so that the game can take place several times
times. and at the end, depending on the winner, I returned his number: 1 or 2 and the book
with which he won.
