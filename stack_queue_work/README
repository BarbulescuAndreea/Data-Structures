
hire - I checked if the tree is NULL, if it is not,
I put in found the manager I need. in newnode
I have the new employee that needs to be added to the hierarchy. I did
the necessary links for newnode to have found as manager,
and found to have a child on newnode. in the end, I did bubblesort
in found(manager) for his employees to be ordered.

wires - I kept the right employee in the "current" variable
fired. I divided the situation into 3 cases:
case 1- where it currently has no employees, and in which position
he is currently in his manager's team vector, I did
NULL and I released the currently occupied memory.
case 2 - current has an employee. I put on the position that
he was current with his manager, his employee, and I did
the connection and that his current employee now has the new one
manager. finally, I released the current memory and ordered
employees in the team vector of the manager ("boss").
case 3- current has >= two employees/children. I put
his children are currently at his boss, I reallocated the memory for the boss,
and I increased direct_employees_no, I freed the memory for the current si
I ordered the employees for his current manager.

promote - I verified that the employee is at least level 2, checking
if current->manager->manager is NULL or not. we shared
again on 2 cases:
case 1 - if the current one has no children, I took the current one too
I put it to the manager's manager, I made the connections, I did
NULL on the current position with the former manager, then I have
ordered the employees for the manager's manager.
case 2- if the current one has employees/children, I put the team
the promoted employee in his manager's team, I reassigned
the memory for his current manager and the manager to whom he has to go
put on the current, I inserted it on the current, and I made the order
for his current manager and for the manager's manager. finally,
I freed the memory for current->team.

move_employee - newboss - to whom should I move the current one.
I checked again the cases in which the current has or does not have employees.
if he has no employees, I simply moved him. if he has employees,
his team went under the management of the current manager, I redid it
I reassigned all the necessary links from the team to the manager and vice versa
the team vectors for newboss and for exboss, I increased them direct_employees_no,
and then I ordered where necessary.

move_team - I made NULL on the current position before
to be moved, then I contacted newboss. finally, I ordered
newboss's team vector.

fire_team - for this function, I found the position it is on
current to its manager, and I made a NULL, then I freed the memory
allocated for this node.

get_employees_by_manager - I used for this function, browsing
per level, and I used an aux vector in which I kept from position 0
the manager and his employees. on position 0 of the vector is
even the manager. finally I released the aux.

get_employees_by_level - for this function I used
a helper function (getlevel) that determines the level of an employee.
then I also used an aux vector, which would hold the positions
his employees at the same level. I sorted the elements in the vector,
then I displayed them in the file and freed the memory for aux.

get_best_manager - we used a helper function that determines
the number of employees. i used level parking, an aux vector,
in which I put the manager with the most employees, and in case
there are more with the same number of employees, I have displayed them all.

destroy_node - I used a deep traversal, where I destroyed
each node in turn.
